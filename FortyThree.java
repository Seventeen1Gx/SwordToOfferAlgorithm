public class FortyThree {
    // 从 1 到 n 的整数中 1 出现的次数

    // 获取 n 中 1 的个数
    private int cnt(int n) {
        int cnt = 0;
        while (n != 0) {
            if (n % 10 == 1)
                cnt++;
            n /= 10;
        }
        return cnt;
    }

    // 依次判断然后累加
    public int solution_1(int n) {
        // 非正常情况
        if (n <= 0)
            return 0;

        int cnt = 0;
        for (int i = 1; i <= n; i++)
            cnt += cnt(i);
        return cnt;
    }

    // 总结数学规律，然后进行优化

    // 首先要知道的是
    // 从 1 到 10，在它们的个位数上，1 出现了 1 次
    // 从 1 到 100，在它们的十位数上，1 出现了 10 次
    // 从 1 到 1000，在它们的百位数上，1 出现了 100 次
    // 依此类推，从 1 至 10^i，在它左数第二位上，1 出现了 10^(i-1) 次

    // 以 n = 21354 为例

    // i=1，个位：从 1 到 21350 包含 2135 个 10，因此 1 在个位出现了 2135*10^(1-1) 次
    // 剩下的数字是，21351 到 21354，21354 的个位是 4>1，因此在这些数字中 1 在个位出现了 10^(1-1) 次
    // 故从 1 到 21350 中个位出现 1 的次数为 【2136】 次

    // i=2，十位：从 1 到 21300 包含 213 个 100，因此 1 在十位出现了 213*10^(2-1) 次
    // 剩下的数字是 21301 到 21354， 21354 的十位数是 5>1，因此在这些数字中 1 在十位出现了 10^(2-1) 次

    // i=3，百位：从 1 到 21000 包含 21 个 1000，因此 1 在百位出现了 21*10^(3-1) 次
    // 剩下的数字是，21001 到 21354，21354 的百位是 3>1，因此在这些数字中 1 在百位出现了 10^(3-1) 次

    // i=4，千位：从 1 到 20000 包含 2 个 10000，因此 1 在千位上出现了 2*10^(4-1) 次
    // 剩下的数字是，20001 到 21354，21354 的千位数是 1=1，因此在这些数字中 1 在千位出现了 354+1 次

    // 万位：21354 万位上的数是 2>1，因此 1 在万位出现了 10^(4-1)

    // 总结
    // 从 n 低位向高位数，第 i 位上 X 出现的次数计算如下（i 从 1 开始，X 可以是 1~9）
    // 1. 取第 i 位左边的数字乘以 10^(i-1)，得到 a
    // 2. 取第 i 位数字，计算修正值
    //   2.1 如果大于 X，最终结果为 a + 10^(i-1)
    //   2.2 如果小于 X，最终结果为 a
    //   2.3 如果等于 X，则 b 为第 i 位右边的数字，最终结果为 a + b + 1


    public int solution_2(int n) {
        if (n <= 0)
            return 0;

        int cnt = 0;
        // pow 为 10^(i-1)
        int pow = 1;
        while (n / pow != 0){
            // 第 i 位左边的数字
            int leftNum = n / (pow * 10);
            // 基础值
            cnt += leftNum * pow;

            // 第 i 位的数字
            int x = (n / pow) % 10;
            if (x > 1)
                cnt += pow;
            else if (x == 1) {
                int rightNum = n % pow;
                cnt += rightNum + 1;
            }
            pow *= 10;
        }
        return cnt;
    }
}
